HISTSIZE=20000
HISTFILESIZE=20000

source /home/$USER/.conf/.local_aliases
neofetch

##META
alias vimrc="vim /home/$USER/.conf/.aliases"
alias uprc="source /home/$USER/.bashrc"
alias catrc="cat /home/$USER/.conf/.aliases"

##SHORTENERS
alias ls="ls+"
alias ll="ls -al"
alias l="ls -l"
alias lh="ls -a"
alias lll="readlink -f"

alias c="clear"
alias x="exit"

alias gateway="ip route | grep default"
alias sshupdate="echo \"\" > /home/$USER/.ssh/known_hosts"
alias addtopath="PATH=$PATH:$(pwd)"
#alias qfind="find . -iname"
alias utar="tar -xzvf"
alias mkdir="/bin/mkdir"


##ERRONEOUS INPUT HANDLERS
#case
alias LL="ls -al"
alias L="ls -l"
alias LH="ls -a"
alias C="clear"
alias X="exit" 
alias UPRC="uprc"
alias VIM="vim"
alias QFIND="qfind"
alias GET="get"
alias CP="cp"
alias CD="cd"

#spelling
alias k="l"
alias fdsik="fdisk"
alias ipa="ip a"
alias suod="sudo"

alias vmi="vim"
alias cim="vim"
alias bim="vim"

alias souce="source"
alias sourc="source"
alias surce="source"
alias sorce="source"
alias soure="source"

alias mont="mount"
alias munt="mount"
alias moun="mount"

##FUNCTIONS
function mdate {
	foo="Valheim-`date +%F`"
	cp -r /home/oakeada/testy /home/oakeada/$foo
}

function upfind {
	startDir=$PWD
	while [[ $PWD != / ]] ; do
	    find "$PWD"/ -maxdepth 1 -iname "$@"
	    cd ..
	done
	cd $startDir
}


function mkdir {
	/usr/bin/mkdir $1
	export NEW_DIR = "hello"
}

#gets filename from full path
function revslash {
	echo  $1 | tr '\\' '/'
}

function qfind {
	find . -iname $1 2>/dev/null
}

function qgrep {
	grep -rEIn $1 2>/dev/null
}

function hgrep {
	grep -n $1 $(find . -iname *.h) 2>/dev/null
}

function ccc {
    for i in {1..40}
    do
	echo -e
    done
    clear
}

function qfindd {
	find . -iname $1 2>/dev/null
}

function fname {
	echo ${1##*/}
}

function hide {
	for var in $@
		do
			mv $var $var.hidden
				done
}

function unhide {
	for var in $@
		do
			mv $var ${var%.*}
		done
}

function echo_os {
	foo=$(lsb_release -i)
		echo ${foo#*:}
}

function size {
	du -b $1 | awk '{print $1;}'
}

#cp deluxe =) -- lets user see progress
function cpd {
	dest=$2/$(fname $1)
		dd if=$1 ibs=1M status=none | pv -s $(size $1) | dd of=$dest obs=1M status=none oflag=direct
		chmod --reference=$1 $dest
}

function liveUSB {
	sudo dd if=$1 of=$2 bs=4M conv=fdatasync status=progress oflag=direct
}

function get {
	cp $1 ./
}

function pretty_json {
	$1 | python -m json.tool
}

function sh256chk {
	echo "$1 *$2" | shasum -a 256 --check
}

#tar the contents of the pwd
function tarpwd { 
	tar -czvf $(fname $(pwd)).tar.gz .
}

function greph {
	history | grep $1 | tail
}

function showme {
        if [ "$#" -ne 2 ]; then
                  len=20
        else
                  len=$2
        fi

	foo=$1
	lineNum=${foo##*:}
	let lineNumb=$lineNum-1
	let end=$lineNum+$len
	path=${foo%%:*}
	theLine=$(cat $path | head -$lineNum | tail -1)	

	cat $path | head -$lineNumb | tail -$len
	echo "$(tput setab 2) $theLine $(tput sgr 0)"
	cat $path | head -$end | tail -$len
}

####USER NOTES - USEFUL COMMANDS
 ###COMMANDS IN SUCCESSION
  #run b iff a is sucessful
   #$a && b
  #run b even if a fails
   #$a;b
  #run b if a never even finishes
   #$a & b

 ###MISC
  ##Add user to a group
   #gpasswd -a <username> <groupname>
  ##Get OS version
   #lsb_release -a
  ##Netcat send
   #nc <ip> <port> < <filename>
  ##Netcat receive
   #nc -l <port> > <filename>
  ##Netcat a whole directory
   #tar cfvz - <directory> | nc <ip> <port>
  ##Get sizeof a file/directory
   #du -sh <filename>
  ##untar a .gz file
   #tar -xvzf
  ##ifttt triggers
   #curl -X POST https://maker.ifttt.com/trigger/<event>/with/key/ceyFl30ngD4ES9fFogAKfl
  ##set var to result of cmd
   #dir=`cat sometextfile.txt`
  ##xargs
    #By default xargs reads items from standard input as separated by blanks and executes a command once for each argument.
     #echo 'one two three' | xargs mkdir
    #will execute: 
     #$mkdir one 
     #$mkdir two
     #$mkdir three
 ##grep for multiple strings at once
  #$grep -E 'file1|file2|file3'
 ##to add line numbers to vim, add this line to ~/.vimrc
  # :set number
 ##to add syntax-highlighting to a specific file type, add this line to ~/.vimrc
  #autocmd BufNewFile,BufRead .aliases set syntax=sh
 ##change date
  #e.g. to 3:14am on dec 7 1992
   #$date 1207031492

 ###STRING MANIPULATION
  ##remove everything after & including last matching substring
   #${string%substring*}
   #e.g foo="letter" && echo ${foo%t*}
   #will print "let"
  ##remove everything after & including first matching substring
   #${string%%substring*}
   #e.g foo="letter" && echo ${foo%%t*}
   #will print "le"
  ##remove everything before & including first matching substring
   #${string#*substring}
   #e.g foo="letter" && echo ${foo#*t}
   #will print "ter"
  ##remove everything before & including last matching substring
   #${string##*substring}
   #e.g foo="letter" && echo ${foo##*t}
   #will print "le"
  ##manipulate string after a pipe
   #echo letter | (read x; echo ${x%t*})
   #will print "let"

 ###GIT
  ##show all currently tracked files
   #git ls-tree -r master --name-only
  ##This will destroy any local modifications - Don't do it if you have uncommitted work you want to keep.
   #git reset --hard 0d1d7fc32
  ##Alternatively, if there's work to keep:
   #git stash
   #git reset --hard 0d1d7fc32
   #git stash pop
   ##This saves the modifications, then reapplies that patch after resetting.
   ##You could get merge conflicts, if you've modified things which were
   ##changed since the commit you reset to.

